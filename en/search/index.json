[{"content":" # Introduction The Apple M1 chip introduced a major change to Mac architecture, moving from the traditional Intel x86 architecture to ARM architecture. This change means for developers that many existing applications and dependent libraries need to adapt to the new arm64 architecture. In this blog, weâ€™ll explore typical error messages you may encounter when using the iOS Simulator on an M1 Mac, explain the rationale behind them, and provide practical solutions.\n# M1 chip and simulator compatibility issues # Principle analysis The M1 chip\u0026rsquo;s ARM architecture is significantly different from the x86 architecture found on earlier Macs. The M1 chip natively supports the arm64 architecture instead of the x86_64 architecture used by Intel chips. This change directly affects the development environment, especially when running the emulator.\nOn M1 Macs, the iOS simulator can run directly in the arm64 architecture without any conversion, which can improve performance. But this also brings a problem: many existing third-party libraries and dependencies are still only compiled for the x86_64 architecture and fail to provide an arm64 version.\n# Error reporting When developers use the simulator to run these libraries that only support x86_64 on an M1 Mac, they may encounter error messages similar to the following:\nBuilding for \u0026#39;iOS-simulator\u0026#39;, but linking in object file built for \u0026#39;iOS\u0026#39;, incompatible with iOS-simulator arm64. This indicates an attempt to run a library compiled only for the x86_64 architecture on an emulator for the arm64 architecture.\n# Solution # Using EXCLUDED_ARCHS The EXCLUDED_ARCHS setting is used in Xcode to specify the architectures to exclude during compilation. By setting EXCLUDED_ARCHS to arm64, Xcode will not try to compile code for the arm64 architecture when compiling for the simulator, thus avoiding architecture mismatch issues.\n# Specific operations Open Xcode Project Settings: Select the project file and look for the Excluded Architectures setting in the Build Settings tab. Set Exclude Architecture: Add the arm64 value to the Debug and Release configurations to ensure that this architecture is excluded when the simulator is compiled. To set Excluded Architectures for all CocoaPods dependencies, you can use the post-install hook in your project\u0026rsquo;s Podfile to apply this configuration globally. Doing this ensures that all libraries managed through CocoaPods will exclude the specified architecture. Here\u0026rsquo;s how to implement this setting in your Podfile:\nOpen your Podfile.\nAt the bottom of the file, add a post_install hook.\nInside the hook, write a script to set EXCLUDED_ARCHS.\nHere is sample code on how to add this hook in the Podfile:\n#Podfile # Other Podfile configurations... post_install do |installer| installer.generated_projects.each do |project| project.build_configurations.each do |config| # Set to exclude arm64 architecture config.build_settings[\u0026#39;EXCLUDED_ARCHS[sdk=iphonesimulator*]\u0026#39;] = \u0026#39;arm64\u0026#39; end end end This code loops through all generated Xcode projects in the post_install hook and sets EXCLUDED_ARCHS for each configuration, excluding the arm64 architecture only for the iPhone Simulator SDK. This means that when you run your project on the simulator, Xcode will ignore the arm64 architecture, helping resolve compatibility issues.\nAfter making these changes, you need to run the pod install or pod update command to ensure that the changes are applied to your project. Doing this can help resolve architecture mismatch issues encountered when using the emulator on M1 Macs.\n# Principle description The idea behind this is to have Xcode ignore support for the arm64 architecture when building the app, which means it will use Rosetta 2 to emulate the x86_64 architecture, allowing the app to run on the simulator on an M1 Mac.\n# Long term solution While using EXCLUDED_ARCHS can resolve compatibility issues, it is only a temporary solution. In the long term, library maintainers will need to update their code to ensure they support the arm64 architecture. As more developers move to M1 Macs, native support for the arm64 architecture becomes even more important.\n# Conclusion The introduction of the M1 chip had a profound impact on Mac application development, particularly in terms of processing architecture compatibility. Understanding how these compatibility issues work, and knowing how to work around them, is critical to keeping the development process flowing. As technology advances and the ecosystem matures, developers will need to adapt to this change, updating and optimizing their applications to take full advantage of the M1 chip. In the long term, library and tool maintainers will also update their products to natively support the new architecture, ultimately eliminating these compatibility issues. So while some temporary solutions may be needed to deal with architectural compatibility issues, we can also look forward to a more unified and efficient development environment that will make app development and running on all Apple devices smoother.\n","date":"2024-04-11T12:02:52+08:00","permalink":"https://ohdijkstra.github.io/en/post/arm64-simulator-conflict/","title":"Resolve the simulator running error caused by CocoaPods dependency on arm64 architecture Mac which only supports x86 architecture"},{"content":" # Introduction Freqtrade is an open-source cryptocurrency algorithmic trading software that allows traders to automate their trades with customized strategies. This tutorial is designed to introduce you to the basic concepts and operating procedures of Freqtrade in simple language and step-by-step analysis, so that you can understand and start using this tool for algorithmic trading.\n# Summary Introduction to Freqtrade: Learn what Freqtrade is and its main features. Environment Setup: How to install and configure Freqtrade. Strategy Development: The basic components and development process of a strategy. Backtesting and Optimization: How to test and optimize a trading strategy. Real Trading: Apply the strategy to real trading. # About Freqtrade Freqtrade is a Python-based algorithmic trading software that is primarily used in the cryptocurrency market. Its key features include an easy-to-use command-line interface, support for multiple exchanges, flexible strategy configuration, and effective data management. Users can write their own trading strategies, and Freqtrade will automatically execute trades based on these strategies.\n# Environment Setup The premise of Freqtrade\u0026rsquo;s use is the premise of setting up the environment, which ensures the infrastructure on which the software runs. This section will detail the Freqtrade installation process, the configuration file settings, and how to prepare the trading environment.\n# Install Freqtrade Installing Freqtrade involves several key steps to ensure that the software will run smoothly in your system.\nSystem Requirements: Make sure your operating system is capable of running Freqtrade. While Freqtrade supports a wide range of operating systems (such as Windows, macOS, and Linux), running on Linux generally provides the best performance and stability.\nInstall Python: Freqtrade is written in Python, so a Python environment is required. It is recommended to use Python 3.7 or later to ensure compatibility and performance. You can download and install it from the Python official website (https://www.python.org/).\nClone Freqtrade repository: Clone Freqtrade\u0026rsquo;s GitHub repository to your local computer via Git. If you don\u0026rsquo;t have Git installed, you can download it from the Git official website (https://git-scm.com/). Use the following command to clone the repository:\ngit clone https://github.com/freqtrade/freqtrade.git This will create a directory on your machine containing the Freqtrade source code.\nInstallation Dependencies: Freqtrade has a range of Python library dependencies. In the Freqtrade directory, run the following command to install these dependencies:\ncd freqtrade pip install -r requirements.txt This will ensure that all the necessary libraries are installed in your Python environment.\n# Configure Freqtrade Configuration is key to Freqtrade\u0026rsquo;s proper functioning, involving aspects such as API connection, trading parameters and strategy selection.\nProfile: Freqtrade uses a configuration file in JSON format. You can start with the \u0026lsquo;config.json.example\u0026rsquo; sample file, copy and rename it to \u0026lsquo;config.json\u0026rsquo;, and edit it according to your needs.\nSet up an API key: In order for Freqtrade to be able to execute trades on the exchange, you will need to provide an API key. It is usually generated on your exchange account page and filled in the appropriate place in the configuration file.\nSelect Trading Pair and Amount: In the profile, you can set the currency pair you want to trade and the amount or percentage to be used for each trade.\nOther configurations: including but not limited to risk management parameters (such as stop loss, take profit settings), trading time intervals, log records, etc. These parameters will be set according to your trading strategy and risk appetite.\n# Prepare the trading environment Once you\u0026rsquo;ve installed and configured Freqtrade, you\u0026rsquo;ll need to prepare your trading environment and make sure everything is set up correctly.\nTest Installation: Run Freqtrade\u0026rsquo;s test command to verify that the installation was successful, for example:\nfreqtrade test If everything is fine, the command should be executed without errors.\nDownload Historical Data: In order to backtest or optimize your strategy, you need to download historical trading data. Freqtrade provides commands to help you download your data:\nfreqtrade download-data --timeframe 1h This downloads historical data for the one-hour time frame.\nRun Dry-run: Before actually trading, it is recommended to run Freqtrade in Dry-run mode, which will simulate the trading process without actually executing it. This is a great way to check if your policies and configurations are correct.\n# Strategy Development Strategy development is a core part of Freqtrade\u0026rsquo;s use, which determines the intelligence and success rate of trading behavior. This section takes a deep dive into what constitutes a strategy, how to develop it, and how to test and optimize your strategy.\n# Policy Structure In Freqtrade, a strategy is a Python class that contains specific functions and settings. A typical policy file contains the following sections:\nMetadata Definition: Includes the policy\u0026rsquo;s name, author, version number, and applicable time frame. This information helps you identify and manage policies. Indicator Settings: One of the most important parts of the strategy that defines the technical indicators used to generate trading signals. Buy and Sell Signal Logic: Conditional logic that defines when to buy and sell based on the results of the indicator. Stop-Loss and Take Profit: Set the risk management measures of the strategy, such as stop-loss and take-profit points. # Development Process The process of strategy development can be divided into the following steps:\nUnderstand the market and choose indicators: First of all, you need to have a deep understanding of the market, and choose the right technical indicators based on this understanding. For example, if you believe that the market has a trending character, you might choose trend indicators such as moving averages (MAs), relative strength index (RSI), etc.\nWrite Strategy Logic: Write buy and sell conditions based on the selected indicator. This usually involves programming skills, the need to implement the calculation of indicators and the logical judgment of signals in the strategy document.\nConfigure Strategy File: Configure the required parameters in the strategy class, such as the time period of the indicator, the threshold of buying and selling conditions, etc.\n# Test and Optimize Strategies Once a strategy is developed, it needs to be backtested to verify its effectiveness and profitability. Freqtrade offers a powerful backtesting tool that allows you to test strategies on historical data.\nBacktesting: Run a strategy using Freqtrade\u0026rsquo;s backtesting feature to see how it performs on historical data. This can be done with a command-line tool, for example:\nfreqtrade backtesting --strategy YourStrategy This will show the performance of the strategy, including important metrics such as profit and loss, maximum drawdown, etc.\nResult Analysis: Drill down into the backtesting results to identify your strategy\u0026rsquo;s strengths and weaknesses. Evaluate strategy performance based on metrics such as return curve, win rate, profit and loss ratio, and more.\nOptimization: Optimize the strategy parameters based on the backtest results. Freqtrade supports the strategy optimization function, which can automatically adjust the parameters to find the best configuration.\n# Policy Example Let\u0026rsquo;s say we\u0026rsquo;re developing a strategy based on a simple moving average (SMA) crossover, which we might do like this:\nDefine indicator: Calculate SMAs with two different periods (e.g. SMA30 and SMA100). Buy logic: A buy signal is given when the short-term SMA (SMA30) crosses the long-term SMA (SMA100) from below. Sell logic: A sell signal is given when the short-term SMA (SMA30) crosses the long-term SMA (SMA100) from above. With such logic, we can construct a simple trend-following strategy. Then, through the backtesting and optimization process, we can refine this strategy, improve its performance, and ultimately form an efficient automated trading strategy.\n# Real Trading Real trading is the process of executing a strategy in a real market environment, which is the ultimate goal of algorithmic trading. Implementing real trading in Freqtrade requires careful and precise preparation. This section will explore in detail how to safely and effectively deploy your strategy into live trading.\n# Preparation Phase Before starting a real trade, you need to make sure of the following:\nStrategy Validation: Make sure that your strategy is fully backtested and optimized, and that it performs well in Dry-run mode.\nRisk Management: Define your risk tolerance and set stop-loss and take-profit points accordingly. These settings should be clearly defined in the policy to be automated.\nMoney Management: Decide how much money to use for trading. You shouldn\u0026rsquo;t invest more money than you can afford. In Freqtrade, the amount of funds used can be set through the profile.\n# Start live trading Configure Real Trading Environment: Switch to real mode in the configuration file and make sure that all settings (such as API key, fund allocation, trading pairs, etc.) are correct.\nMonitoring and Maintenance: Once live trading is initiated, it is important to continuously monitor trading activity and system performance. While Freqtrade can automate the execution of trades, it is important to monitor trading conditions and market changes.\nLogging: Check Freqtrade\u0026rsquo;s log files regularly, this can help you understand trading behavior and possible issues. Performance Evaluation: Regularly evaluate the performance of your trading strategy to ensure that it still meets your intended trading objectives and risk management requirements. Respond to market changes: Market conditions are constantly changing, and your strategy may need to adjust to accommodate these changes. Keeping your strategy updated and sensitive to market trends can improve your chances of long-term success.\n# Risk Control In real trading, risk control is crucial. This includes: :\nSet a reasonable stop loss: to prevent large losses. Diversification: Don\u0026rsquo;t put all your money into a single trade or market. Avoid overtrading: Trade according to the logic of the strategy and avoid unnecessary trading due to emotional decisions. # Optimize \u0026amp; Iterate Even in real trading, strategies should be continuously sought to optimize and improve. The market is dynamic, and the strategy should also be dynamically adjusted:\nCollect Trading Data: Analyze live trading data to understand how your strategy performs in the real market. Periodic Backtesting: Regularly backtesting strategies with the latest market data to ensure their effectiveness. Timely Adjustments: Make necessary adjustments based on market changes and strategy performance. With the above steps, you can start trading algorithms with Freqtrade. While this tutorial is only a brief introduction to Freqtrade, it gives you enough information to start exploring this powerful trading tool. Further in-depth study and practice will help you better understand and utilize Freqtrade\u0026rsquo;s features to optimize your trading strategy.\n","date":"2024-03-22T13:27:39+08:00","permalink":"https://ohdijkstra.github.io/en/post/freqtrade-tutorial/","title":"Freqtrade Algorithmic Trading Tutorial Concise"},{"content":"In the Internet age, having a personal website has become standard for almost every technology enthusiast. It not only showcases your technology stack, but also shares your thoughts and insights. This article will guide you how to use Hugo - a fast, flexible static website generator - to build your personal website. We will start with the basic concepts, gradually deepen into the core features of Hugo, and finally lead you to complete the construction of a personalized website.\n# Introduction Hugo is a static website generator written in Go language, which is famous for its fast build speed and flexible configuration. Compared with dynamic websites, static websites do not rely on databases, and pages are pre-generated on the server, which can provide faster loading speeds and higher security. Hugo not only helps you quickly generate a website, but also makes website design simple and elegant through rich themes and templates.\n# Install Hugo Installing Hugo is a simple and straightforward process. You can download the installation package for the corresponding platform through the package manager or directly from Hugo\u0026rsquo;s official website.\n# Windows If you are using Windows, you can install it through Chocolatey:\nchoco install hugo -confirm # macOS For macOS users, you can use Homebrew to install:\nbrew install hugo # Linux Linux users can use package managers such as apt or yum. Here, apt is used as an example:\nsudo apt-get install hugo After the installation is complete, you can verify whether the installation was successful by running hugo version.\n# Create your first website After installing Hugo, you can start creating your first website immediately. Open a terminal or command prompt and run the following command:\nhugo new site my-first-website This line of command will create a new directory called my-first-website and initialize an empty Hugo website structure.\n# Select a theme The Hugo community provides many beautiful themes, and you can find them on the Hugo Themes website. Choose a theme you like and clone it into the themes directory of your website. Take the Ananke theme as an example:\ncd my-first-website git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke Next, edit your websiteâ€™s configuration file config.toml and set the theme to Ananke:\ntheme = \u0026#34;ananke\u0026#34; # Add content Now that your website has a theme, itâ€™s time to add some content. Hugo manages content through Markdown files, so you can easily write and format your articles.\nhugo new posts/my-first-post.md This will create a new Markdown file in the content/posts directory. Open this file with your favorite text editor and you\u0026rsquo;ll see that Hugo has filled in some basic prepend metadata for you. Below this, you can start writing your article content.\n# Local preview website Before publishing your site, you may want to preview it locally. Hugo provides a built-in server that allows you to see changes in real time:\nhugo server -D The -D parameter will cause Hugo to include the contents of the draft state. Open your browser and visit http://localhost:1313, and you will be able to see your website.\n# Deploy your website When you are satisfied with your website and ready to publish it to the Internet, you need to generate the static files and upload them to a web server or use a static website hosting service such as GitHub Pages or Netlify.\nRun the following command to generate static content:\nhugo -D This will generate your website in the public directory. Just upload this directory to your server or use any service that supports static website hosting.\n# Conclusion Congratulations, you now have a personal website built with Hugo! Through the above steps, we not only introduced the basic concepts and installation process of Hugo, but also guided you step by step to create, design, add content, and finally deploy your website. Hugo\u0026rsquo;s flexibility and speed provide individuals and businesses with a powerful tool to quickly build and manage websites. As you further explore Hugo, you\u0026rsquo;ll be able to take advantage of its advanced features, such as custom themes, shortcodes, multi-language support, and more, to enrich your website\u0026rsquo;s functionality and improve your user experience.\nKeep exploring and make your website more personalized and feature-rich!\n","date":"2024-03-05T11:01:24+08:00","permalink":"https://ohdijkstra.github.io/en/post/about-hugo/","title":"How to quickly use Hugo to create your own website"},{"content":"Welcome to our technology blog! Today, we will delve into the principles of ChatGPT, a natural language processing model developed by OpenAI. We will start with basic natural language processing concepts and gradually delve into the core principles of ChatGPT to help everyone better understand the working mechanism of this revolutionary technology.\n# Introduction In the world of artificial intelligence, natural language processing (NLP) technology occupies a very important position. It enables machines to understand, interpret and generate human language to achieve effective communication with humans. ChatGPT, as the latest generation of language processing model, has attracted widespread attention and discussion through its amazing language understanding and generation capabilities.\n# Introduction to natural language processing The core goal of natural language processing technology is to enable machines to understand and generate language like humans. This involves multiple subfields, including syntax analysis, semantic understanding, sentiment analysis, etc. Early NLP technology relied on a large number of rules and dictionaries, but this method was often inadequate when dealing with complex language phenomena.\nWith the development of deep learning technology, revolutionary changes have taken place in the field of NLP. Models such as BERT and GPT are trained based on large-scale data sets, which can capture the deep structure and meaning of language, greatly improving language processing capabilities.\n# Introduction to GPT model GPT (Generative Pre-trained Transformer) is a pre-trained language generation model based on the Transformer architecture. It is first pre-trained on large-scale text datasets to learn the general patterns and structures of language, and then fine-tuned on specific tasks to achieve a high degree of task customization.\n# Transformer Architecture The Transformer model is the core of GPT, which was proposed by Vaswani et al. in 2017. Transformer is entirely based on the Self-Attention Mechanism, which enables the model to effectively capture long-distance dependencies when processing sequence data.\nThe mathematical representation of the self-attention mechanism is as follows:\n$$ \\text{Attention}(Q, K, V) = \\text{softmax}\\left(\\frac{QK^T}{\\sqrt{d_k}}\\right)V $$\nAmong them, (Q), (K), and (V) represent the query (Query), key (Key), and value (Value) respectively, and (d_k) is the dimension of the key. This mechanism allows the model to take into account all other words in the sentence when generating each word, thereby better understanding contextual relationships.\n# Pre-training and fine-tuning The training of the GPT model is divided into two stages: pre-training and fine-tuning. In the pre-training stage, the model is trained on a large amount of unlabeled text to learn general knowledge of the language. In the fine-tuning phase, the model is further trained on labeled data for specific tasks to adapt to specific application scenarios.\n# How ChatGPT works ChatGPT is optimized and customized based on GPT to make it more suitable for chat robot scenarios. It is trained on large-scale dialogue data, enabling the model to generate coherent and logical dialogue text.\n# Dialogue Understanding ChatGPT generates responses by understanding context. It takes into account not only the current input, but also the previous conversation history, which makes the generated responses more natural and relevant.\n# Generate strategy ChatGPT uses a variety of strategies to optimize output when generating text, including temperature adjustment, top-k sampling, etc. These strategies help the model avoid generating irrelevant or inappropriate text while maintaining text diversity. content.\n# Conclusion By in-depth analysis of the principles of ChatGPT, we can see how it has made breakthroughs in the field of natural language processing. From the basic Transformer architecture to complex dialogue understanding and text generation strategies, ChatGPT demonstrates the high level of development of current AI technology. Although there are still many challenges and limitations, ChatGPT and the technology behind it undoubtedly provide new possibilities for future human-computer interaction.\nI hope this blog can help you better understand the principles and working mechanism of ChatGPT. Technology is constantly advancing, and we will continue to explore and share more cutting-edge knowledge. Thanks for reading!\n","date":"2024-03-04T07:16:51+01:00","permalink":"https://ohdijkstra.github.io/en/post/my-first-post/","title":"ChatGPT principle analysis"}]